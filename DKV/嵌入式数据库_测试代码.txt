#include <iostream>
#include "storage/engine.hpp"
#include <thread>
#include <vector>
#include <atomic>
#include <chrono>
#include <random>
#include <algorithm>
#include <iomanip>
#include <fstream>

// 全局输出锁
std::mutex g_cout_mutex;

// 性能统计结构
struct PerfStats {
    uint64_t put_ops = 0;
    uint64_t get_ops = 0;
    uint64_t remove_ops = 0;
    uint64_t put_success = 0;
    uint64_t get_success = 0;
    uint64_t remove_success = 0;
    uint64_t duration_ms = 0;
};

// 测试配置
struct TestConfig {
    int num_threads = 8;             // 线程数
    int num_operations = 100000;     // 每个线程操作次数
    double put_ratio = 0.4;          // PUT操作比例
    double get_ratio = 0.5;          // GET操作比例
    double remove_ratio = 0.1;       // REMOVE操作比例
    int key_space_size = 10000;      // 键空间大小
    int value_size_min = 10;         // 值最小长度
    int value_size_max = 1000;       // 值最大长度
    bool use_shared_engine = true;   // 是否使用共享引擎
    bool prefill = true;             // 是否预填充数据
    std::string report_file = "performance_report.txt"; // 报告文件
};

// 生成随机字符串
std::string random_string(size_t length) {
    auto randchar = []() -> char {
        const char charset[] =
        "0123456789"
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz";
        const size_t max_index = (sizeof(charset) - 1);
        return charset[rand() % max_index];
    };
    std::string str(length, 0);
    std::generate_n(str.begin(), length, randchar);
    return str;
}

// 工作线程函数
void worker_thread(StorageEngine& engine, TestConfig config, PerfStats& stats, 
                  int thread_id, std::atomic<bool>& running) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int> key_dist(0, config.key_space_size - 1);
    std::uniform_real_distribution<double> op_dist(0.0, 1.0);
    std::uniform_int_distribution<int> value_len_dist(config.value_size_min, config.value_size_max);
    
    // 等待所有线程准备完毕
    while (!running.load()) {
        std::this_thread::yield();
    }
    
    auto start_time = std::chrono::steady_clock::now();
    
    for (int i = 0; i < config.num_operations; ++i) {
        // 随机选择一个键
        std::string key = "key_" + std::to_string(key_dist(gen));
        
        // 根据比例决定操作类型
        double op_type = op_dist(gen);
        
        if (op_type < config.put_ratio) {
            // PUT操作
            std::string value = random_string(value_len_dist(gen));
            bool success = engine.put(key, value);
            stats.put_ops++;
            if (success) stats.put_success++;
        } 
        else if (op_type < config.put_ratio + config.get_ratio) {
            // GET操作
            auto val = engine.get(key);
            stats.get_ops++;
            if (val.has_value()) stats.get_success++;
        } 
        else {
            // REMOVE操作
            bool success = engine.remove(key);
            stats.remove_ops++;
            if (success) stats.remove_success++;
        }
    }
    
    auto end_time = std::chrono::steady_clock::now();
    stats.duration_ms = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();
}

// 性能测试主函数
void performance_test(TestConfig config) {
    // 创建存储引擎
    StorageEngine engine("../log_perf_test");
    
    // 预填充数据
    if (config.prefill) {
        std::cout << "Prepopulating database with " << config.key_space_size << " keys..." << std::endl;
        for (int i = 0; i < config.key_space_size; ++i) {
            std::string key = "key_" + std::to_string(i);
            engine.put(key, "initial_value_" + std::to_string(i));
        }
    }
    
    std::vector<std::thread> threads;
    std::vector<PerfStats> stats(config.num_threads);
    std::atomic<bool> running(false);
    
    // 创建线程
    for (int i = 0; i < config.num_threads; ++i) {
        threads.emplace_back([&engine, config, &stats, i, &running] {
            worker_thread(engine, config, stats[i], i, running);
        });
    }
    
    // 启动所有线程
    running.store(true);
    auto test_start = std::chrono::steady_clock::now();
    
    // 等待线程结束
    for (auto& t : threads) {
        t.join();
    }
    
    auto test_end = std::chrono::steady_clock::now();
    auto total_duration = std::chrono::duration_cast<std::chrono::milliseconds>(test_end - test_start);
    
    // 汇总统计
    PerfStats total_stats;
    uint64_t max_thread_time = 0;
    
    for (const auto& s : stats) {
        total_stats.put_ops += s.put_ops;
        total_stats.get_ops += s.get_ops;
        total_stats.remove_ops += s.remove_ops;
        total_stats.put_success += s.put_success;
        total_stats.get_success += s.get_success;
        total_stats.remove_success += s.remove_success;
        
        if (s.duration_ms > max_thread_time) {
            max_thread_time = s.duration_ms;
        }
    }
    
    // 计算吞吐量
    uint64_t total_ops = total_stats.put_ops + total_stats.get_ops + total_stats.remove_ops;
    double total_ops_per_sec = total_ops / (total_duration.count() / 1000.0);
    double max_thread_ops_per_sec = (config.num_operations * 1000.0) / max_thread_time;
    
    // 输出结果
    {
    std::lock_guard<std::mutex> lock(g_cout_mutex);
    std::cout << "\n================ Performance Test Results ================\n";
    std::cout << "Thread count:          " << config.num_threads << "\n";
    std::cout << "Operations per thread: " << config.num_operations << "\n";
    std::cout << "Total operations:      " << total_ops << "\n";
    std::cout << "Total duration:        " << total_duration.count() << " ms\n";
    std::cout << "Throughput:            " << total_ops_per_sec << " ops/sec\n";
    std::cout << "Max thread throughput: " << max_thread_ops_per_sec << " ops/sec\n";
    std::cout << "---------------------------------------------------------\n";
    std::cout << "PUT operations:        " << total_stats.put_ops 
              << " (success: " << total_stats.put_success 
              << ", " << std::fixed << std::setprecision(2) 
              << (100.0 * total_stats.put_success / total_stats.put_ops) << "%)\n";
    std::cout << "GET operations:        " << total_stats.get_ops 
              << " (success: " << total_stats.get_success 
              << ", " << std::fixed << std::setprecision(2) 
              << (100.0 * total_stats.get_success / total_stats.get_ops) << "%)\n";
    std::cout << "REMOVE operations:     " << total_stats.remove_ops 
              << " (success: " << total_stats.remove_success 
              << ", " << std::fixed << std::setprecision(2) 
              << (100.0 * total_stats.remove_success / total_stats.remove_ops) << "%)\n";
    std::cout << "=========================================================\n";
    engine.~StorageEngine();
    }

}

// 运行多组测试
void run_performance_suite() {
    // 基础配置
    TestConfig base_config;
    base_config.num_threads = 8;
    base_config.num_operations = 150000;
    base_config.put_ratio = 0.3;
    base_config.get_ratio = 0.7;
    base_config.remove_ratio = 0.1;
    base_config.key_space_size = 10000;
    base_config.value_size_min = 10;
    base_config.value_size_max = 1000;
    base_config.prefill = true;
    
    std::cout << "Starting performance test suite...\n";
    
    // 测试1: 不同线程数
    std::cout << "\n===== Testing with different thread counts =====\n";
    for (int threads : {1, 2, 4, 8, 16, 32}) {
        TestConfig config = base_config;
        config.num_threads = threads;
        std::cout << "\nRunning test with " << threads << " threads...\n";
        performance_test(config);
    }
    
    // 测试2: 不同读写比例
    std::cout << "\n===== Testing with different read/write ratios =====\n";
    for (double read_ratio : {0.1, 0.3, 0.5, 0.7, 0.9}) {
        TestConfig config = base_config;
        config.get_ratio = read_ratio;
        config.put_ratio = (1.0 - read_ratio) * 0.8; // 80% of remaining for PUT
        config.remove_ratio = (1.0 - read_ratio) * 0.2; // 20% for REMOVE
        std::cout << "\nRunning test with read ratio: " << read_ratio 
                  << " (PUT: " << config.put_ratio 
                  << ", REMOVE: " << config.remove_ratio << ")\n";
        performance_test(config);
    }
    
    // 测试3: 不同键空间大小
    std::cout << "\n===== Testing with different key space sizes =====\n";
    for (int key_space : {100, 1000, 10000, 100000}) {
        TestConfig config = base_config;
        config.key_space_size = key_space;
        std::cout << "\nRunning test with key space: " << key_space << "\n";
        performance_test(config);
    }
    
    // 测试4: 不同值大小
    std::cout << "\n===== Testing with different value sizes =====\n";
    for (auto size_range : std::vector<std::pair<int, int>>{
        {10, 50},    // 小值
        {100, 500},  // 中值
        {1000, 5000} // 大值
    }) {
        TestConfig config = base_config;
        config.value_size_min = size_range.first;
        config.value_size_max = size_range.second;
        std::cout << "\nRunning test with value size: " 
                  << size_range.first << "-" << size_range.second << " bytes\n";
        performance_test(config);
    }
    
    std::cout << "\nPerformance test suite completed! Results saved to " 
              << base_config.report_file << "\n";
}

int main() {
    run_performance_suite();
    return 0;
}
